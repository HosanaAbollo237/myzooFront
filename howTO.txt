// Package.json
npm install -y    

// Dependencies
npm install react 
npm install react-dom

// Development dependencies
//Dev_Dependencies
    // babel
npm install --save-dev @babel/core 
npm install --save-dev @babel/preset-env 
npm install --save-dev @babel/preset-react 
npm install --save-dev babel-loader
    // Webpack
npm install --save-dev webpack 
npm install --save-dev webpack-cli 
npm install --save-dev html-webpack-plugin
npm install --save-dev clean-webpack-plugin
    // Dev server
npm install --save-dev webpack-dev-server
    // Not really needed and should be deprecated soon ... | use fast refresh instead
npm install --save-dev react-hot-loader 

    //  
npm install --save-dev style-loader
npm install --save-dev css-loader


EDIT babel.config.json

{
   "presets": [
       "@babel/preset-env"
   ]
}

 "dev": "webpack --mode development --port 3000"

-----------------------------------------------------------------------------------------------------
// Webpack configuration minimal, --> ne pas oublier de créer le fichier index.html dans public !
const path = require('path')
const HtmlWebpackPlugin = require('html-webpack-plugin')

module.exports = {
    entry: {
        index: path.resolve(__dirname,"src","index.js")
    },
    module: {
        rules: [
            {
                test: /\.js$/,
                exclude: /node_modules/,
                use: "babel-loader"
            }
        ]
    },
    output: {
        path: path.resolve(__dirname,"dist"), // create a dist folder and index.bundle.js inside it
        filename: "index.bundle.js"
    },
    plugins: [
        new HtmlWebpackPlugin({
            template: path.resolve(__dirname,"src","template.html") 
            filename: 'index.html',
            title: "Add a title if you want" 
        
        })
    ],
};

---> un bundle sera crée dans dist/index.html

-------------------------------------------------------------------------------------------------------------
Mise en place du serveur 

  "scripts": {
    "create": "webpack",
    "dev": "webpack serve --mode development --open",
    "build": "webpack serve --mode production --open",
    "start": "webpack serve --open"
  },

------------------------------------------------------------------------------
npm install react-router-dom
-> Manage routes by wrapping <App/> container within index.js file

------------------------------------------------------------------------------

// Support Lazy Loading / Code Splitting
    // modify the output 
        output: {
            path: path.resolve(__dirname,"dist"), // create a dist folder and index.bundle.js inside it
            chunkFilename: 'scripts/[name].[fullhash:8].bundle.js',
            filename: 'scripts/[name].[fullhash:8].bundle.js',
            assetModuleFilename: 'bundleImages/[hash][ext][query]'
        },

browser tends to cache these bundles in case if you provide a new bundle it will use old cached files due 
to the same name and that may cause an error, to save that we add hash, it changes if we update our codebase 
so our end user will get the latest feature without worrying about anything.

--------------------------------------------------------------------------------------------------
// ADD environement variables
npm install dotenv

then create a .env at the root of the project 
SECRET_KEY=abcd1234

in a file :
1) require('dotenv').config()
2) process.env.SECRET_KEY

----------------------------------------------------------------------------------------------------------

// App show errors like create-react-App
npm install error-overlay-webpack-plugin --save-dev

and in webpack.confg.json
const ErrorOverlayPlugin = require('error-overlay-webpack-plugin')

plugins: [new ErrorOverlayPlugin()],

----------------------------------------------------------------------------------------------------------


// Utf-8 support ( to avoid some errors  -> like can’t recognize some patterns or tests) 
npm i webpack-utf8-bom --save-dev


// SOLVE ERRORS WITH PAGE REFRESH : CANNOT GET / ...
Add to the devServer object : 
historyApiFallback: true


Sources
https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository
https://medium.com/@thejasonfile/using-dotenv-package-to-create-environment-variables-33da4ac4ea8f
------------------------------------------------------------------------------------------------------------



// Some stuffs to install
$ npm install chalk (voir doc)

// How to get rid of the warning,it just remove the warning while using unsafe methods but
npx react-codemod rename-unsafe-lifecycles <path>


// WEBPACK FONTS 
https://www.robinwieruch.de/webpack-font/

// WEBPACK YOUTUBE TUTS 30MIN EACH PROJECTS
https://www.youtube.com/watch?v=X6GpRxu4q_s&list=PLpc_YvcwbxaTqVUVgWQhISClv_mniIm2o

// WEBPACK AND REACT FROM SCRATCH
https://www.taniarascia.com/how-to-use-webpack/
https://medium.com/nerd-for-tech/webpack-react-optimised-from-scratch-da8f75024ba4
https://dev.to/riyanegi/setting-up-webpack-5-with-react-and-babel-from-scratch-2021-271l
https://linguinecode.com/post/how-to-setup-webpack-dev-server-react-babel#setup-index-html

// REACT FAST REFRESH INSTALLATION
https://dev.to/workingeeks/speeding-up-your-development-with-webpack-5-hmr-and-react-fast-refresh-of8
https://javascript.plainenglish.io/react-fast-refresh-the-new-react-hot-reloader-652c6645548c
https://javascript.plainenglish.io/what-is-react-fast-refresh-f3d1e8401333

// WARN DEPRECATED mais pas trop grave
https://www.npmjs.com/package/webpack-plugin-chokidar

// MANAGE WARNING, WHY USING REACT STRIC MODE 
https://medium.com/nmc-techblog/wait-youre-not-using-react-strictmode-a9713927a33b

// DIFFERENCE PUBLICPATH 
https://stackoverflow.com/questions/62991326/difference-between-publicpath-and-contentbase-in-webpac

// Configure webpack api proxy
https://www.robinwieruch.de/axios-jest
https://stackoverflow.com/questions/64582934/webpack-devserver-historyapifallback
https://flaviocopes.com/how-to-serve-react-from-same-origin/
https://stackoverflow.com/questions/44365577/proxy-in-package-json-not-affecting-fetch-request/50118381
https://stackoverflow.com/questions/35538472/webpack-dev-server-with-backend-api
https://linguinecode.com/post/webpack-dev-server-proxy-api-calls-react

    // trick to get around cors issues locally
    https://itsopensource.com/how-to-serve-api-locally-with-webpack/

    // to package.jsons add entry
"proxy": "http://localhost:8080"


























const path = require('path')
const HtmlWebpackPlugin = require('html-webpack-plugin')

module.exports = {
    entry: {
        index: path.resolve(__dirname,"src","index.js")
    },
    //devtool: 'inline-source-map',
    devServer: {  
      //  host: 'localhost', 
       //inline: true,
        contentBase: path.resolve(__dirname, 'dist'),
        publicPath: 'http://localhost:80/myzoo/front/',
        port: 9000,
        proxy:{
            '/api/animals':{
                target: 'http://localhost:80/front/animals/',
            }
        },
        historyApiFallback: true
    },
    module: {
        rules: [
            {
                test: /\.(js)$/,
                exclude: /node_modules/,
                use: "babel-loader"
            },
            {
                test: /\.css$/,
                use: ["style-loader", "css-loader"]
            },
            {
                test: /\.(png|jpeg)$/i,
                type: 'asset/resource'

            },
        ]
    },
    output: {
        path: path.resolve(__dirname,'dist'), // create a dist folder and index.bundle.js inside it
        //publicPath: path.join(__dirname, 'public'),
        chunkFilename: 'scripts/[name].[fullhash:8].bundle.js',
        filename: 'scripts/[name].[fullhash:8].bundle.js',
        assetModuleFilename: 'bundleImages/[hash][ext][query]'
    },
    plugins: [
        new HtmlWebpackPlugin({
            template: path.resolve(__dirname,"public","index.html") // create public/index.html at root of the project
        })
    ],
};
